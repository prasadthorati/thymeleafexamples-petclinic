# This workflow will build a Java project with Maven, and cache/restore any dependencies to improve the workflow execution time
# For more information see: https://help.github.com/actions/language-and-framework-guides/building-and-testing-java-with-maven

name: Java CI with Maven

on:
  push:
    branches: [ 2.1-master ]
permissions:
      contents: read
      packages: write
      # This is used to complete the identity challenge 
      # with sigstore/fulcio when running outside of PRs.
      id-token: write
env:
  # Use docker.io for Docker Hub if empty
  REGISTRY: ghcr.io

jobs:
  build:
    runs-on: self-hosted
    outputs:
      o-imagename: ${{ steps.set-image-name.outputs.imagename }}

    strategy:
      matrix:
        maven: [ '3.6.3' ]
        java: [ '11']
        
    steps:
      - name: Setup Maven Action
        uses: s4u/setup-maven-action@v1.2.1
        with:
          java-version: ${{ matrix.java }}
          maven-version: ${{ matrix.maven }}
      - name: Set Image Name
        id: set-image-name
        run: |
            echo "IMAGE_NAME=${{ env.REGISTRY }}/${GITHUB_REPOSITORY,,}:$(git rev-parse --short HEAD)" >>${GITHUB_ENV}
            echo "::set-output name=imagename::ghcr.io/${GITHUB_REPOSITORY,,}:$(git rev-parse --short HEAD)"
      - name: Build with Maven
        run: mvn package
        
      - name: Edastakhat UI Build
        run: |
           docker build -t ${{ env.IMAGE_NAME }} .
  artifact-upload:
    needs: 
      - build
    runs-on: ed-kube-worker2
    permissions:
      contents: read
      packages: write
      # This is used to complete the identity challenge 
      # with sigstore/fulcio when running outside of PRs.
      id-token: write          
    steps:
    - name: Log into registry ${{ env.REGISTRY }}
      uses: docker/login-action@28218f9b04b4f3f62068d7b6ce6ca5b26e35336c
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ secrets.GHCR_USERNAME }}
        password: ${{ secrets.GHCR_PASSWORD }}
    
    - name: Push Docker image
      run: |
          docker images
          docker push ${{needs.build.outputs.o-imagename}}
          docker images    
